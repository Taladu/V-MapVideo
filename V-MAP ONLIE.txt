<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <title>V-MapVideo | Hi·ªáu ·ª©ng T√™n ƒë∆∞·ªùng</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover">
    
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="V-MapVideo">
    <link rel="apple-touch-icon" href="apple-touch-icon.png">

    <meta http-equiv="Cache-Control" content="max-age=3600">

    <meta name="theme-color" content="#3386c0">
    <link rel="icon" href="logo.png" type="image/png">

    <link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet">
    <link href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.1/mapbox-gl-directions.css" rel="stylesheet">

    <style>
        body { margin: 0; padding: 0; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif; overscroll-behavior: none; }
        .loader-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: white; display: flex; justify-content: center; align-items: center; z-index: 9999; transition: opacity 0.5s ease; }
        .loader-spinner { border: 5px solid #f3f3f3; border-top: 5px solid #3386c0; border-radius: 50%; width: 50px; height: 50px; animation: spin 1s linear infinite; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        
        .map-container { position: relative; width: 100vw; height: 100vh; overflow: hidden; }
        .map-container::after { content: ""; position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.15); opacity: 0; pointer-events: none; transition: opacity 0.4s cubic-bezier(0.25, 0.8, 0.25, 1); z-index: 3; }
        .map-container.is-dimmed::after { opacity: 1; }

        #map { position: absolute; top: 0; bottom: 0; width: 100%; }
        .mapboxgl-ctrl-directions { min-width: 100%!important; width: 100%!important; box-shadow: none!important; background-color: transparent!important; }
        .mapboxgl-ctrl-directions .mapboxgl-ctrl-geocoder--input { font-size: 18px !important; height: 48px; box-shadow: none!important; background-color: #f0f0f0!important; border-radius: 24px!important; border: none!important; }
        .mapbox-directions-route-summary { font-size: 14px; background-color: transparent !important; color: #333 !important; font-weight: bold; margin-top: 10px !important; box-shadow: none !important; }
        
        .top-bar { 
            position: absolute; top: 15px; left: 15px; right: 15px; background-color: white; border-radius: 12px; 
            box-shadow: 0 4px 12px rgba(0,0,0,0.15); padding: 10px; z-index: 4; min-height: 110px; 
            transition: opacity 0.3s, transform 0.3s; 
            transform: translateY(-20px); 
            opacity: 0; 
            pointer-events: none;
        }
        .top-bar.is-visible { 
            transform: translateY(0); 
            opacity: 1; 
            pointer-events: auto;
        }
        
        .bottom-panel { position: absolute; bottom: 0; left: 0; right: 0; background-color: white; border-top-left-radius: 20px; border-top-right-radius: 20px; box-shadow: 0 -4px 12px rgba(0,0,0,0.1); z-index: 4; padding: 10px 20px; height: 75vh; transform: translateY(calc(75vh - 30vh)); transition: transform 0.4s cubic-bezier(0.25, 0.8, 0.25, 1); display: flex; flex-direction: column; padding-bottom: calc(20px + env(safe-area-inset-bottom)); }
        .panel-handle { width: 40px; height: 5px; background-color: #ccc; border-radius: 2.5px; margin: 5px auto 10px; cursor: grab; touch-action: none; }
        .panel-content { overflow-y: auto; }
        .section-title { font-size: 18px; font-weight: bold; color: #333; margin: 15px 0 10px 0; padding-bottom: 5px; border-bottom: 1px solid #eee; }
        .category-title { font-size: 16px; font-weight: bold; color: #3386c0; margin-top: 15px; margin-bottom: 5px; padding: 10px 5px; border-bottom: 1px solid #eee; cursor: pointer; display: flex; justify-content: space-between; align-items: center; }
        .location-items-container { display: none; padding-left: 10px; border-left: 2px solid #f0f0f0; margin-left: 5px; }
        .location-item { padding: 12px 0; border-bottom: 1px solid #f0f0f0; cursor: pointer; display: flex; align-items: center; }
        .location-item:last-child { border-bottom: none; }
        .location-item img { width: 24px; height: 24px; margin-right: 15px; }
        .location-item h4 { margin: 0; font-size: 16px; color: #333; }
        .controls-grid { display: grid; grid-template-columns: 1fr; gap: 10px; }
        .controls-grid button { padding: 12px 16px; border-radius: 8px; border: 1px solid #ddd; background: #f7f7f7; font-size: 16px; cursor: pointer; text-align: center; transition: background-color 0.2s, color 0.2s; }
        button, select { touch-action: manipulation; }
        .controls-grid button:active { background-color: #ddd; }
        .controls-grid button:hover { background-color: #3386c0; color: white; }
        
        .fab-btn-wrapper { position: absolute; right: 10px; z-index: 2; padding: 10px; transition: bottom 0.4s cubic-bezier(0.25, 0.8, 0.25, 1); }
        .fab-btn { position: relative; right: 0; bottom: 0; background-color: white; border: none; border-radius: 50%; width: 50px; height: 50px; box-shadow: 0 2px 6px rgba(0,0,0,0.2); cursor: pointer; display: flex; justify-content: center; align-items: center; transition: transform 0.2s; }
        .fab-btn:active { transform: scale(0.95); }

        #locateUserBtnWrapper { bottom: calc(30vh - 10px); }
        #showDirectionsBtnWrapper { bottom: calc(30vh + 50px); }
        #showDirectionsBtn { background-color: #3386c0; width: 48px; height: 48px; }

        .youtube-links-overlay { position: absolute; bottom: calc(30vh + 20px); left: 20px; z-index: 2; display: flex; flex-direction: column; gap: 10px; transition: bottom 0.4s cubic-bezier(0.25, 0.8, 0.25, 1); }
        .youtube-links-overlay a { display: inline-block; padding: 10px 15px; background: #ff0000; color: white; border-radius: 8px; text-decoration: none; font-weight: bold; box-shadow: 0 2px 6px rgba(0,0,0,0.2); font-size: 14px; }

        .mapboxgl-popup-content h3 { margin: 0; padding: 6px 10px 4px 10px; font-size: 14px; font-weight: bold; color: white; background-color: #3386c0; border-top-left-radius: 6px; border-top-right-radius: 6px; }
        .mapboxgl-popup-content iframe { width: 100%!important; border-bottom-left-radius: 6px; border-bottom-right-radius: 6px; display: block; }
        .mapbox-directions-instructions { display: none !important; }
        .mapbox-popup-backdrop { display: none !important; }
    </style>
</head>
<body>
    <div id="loader" class="loader-overlay">
        <div class="loader-spinner"></div>
    </div>

    <div class="map-container" id="mapContainer">
        <div class="top-bar" id="directions-container"></div>
        <div id="map"></div>

        <div class="youtube-links-overlay">
            <a href="https://youtube.com/@dunguyen-r3v" target="_blank">üì∫ Xem k√™nh</a>
            <a href="https://www.youtube.com/@dunguyen-r3v?sub_confirmation=1" target="_blank">üîî ƒêƒÉng k√Ω</a>
        </div>

        <div id="showDirectionsBtnWrapper" class="fab-btn-wrapper">
            <button class="fab-btn" id="showDirectionsBtn" aria-label="T√¨m ƒë∆∞·ªùng"><svg width="24" height="24" viewBox="0 0 24 24" fill="white"><path d="M22.43 10.59 13.41 1.57c-.79-.79-2.05-.79-2.84 0L1.57 10.59c-.79.79-.79 2.05 0 2.84l9.02 9.02c.79.79 2.05.79 2.84 0l9.02-9.02c.78-.79.78-2.05-.02-2.84zM12 17.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm1.5-4.5H12v-1h1.5V9h-3v6h1.5v-2z"></path></svg></button>
        </div>
        <div id="locateUserBtnWrapper" class="fab-btn-wrapper">
            <button class="fab-btn" id="locateUserBtn" aria-label="ƒê·ªãnh v·ªã c·ªßa b·∫°n"><svg width="24" height="24" viewBox="0 0 24 24"><path d="M12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm8.94 3c-.46-4.17-3.77-7.48-7.94-7.94V1h-2v2.06C6.83 3.52 3.52 6.83 3.06 11H1v2h2.06c.46 4.17 3.77 7.48 7.94 7.94V23h2v-2.06c4.17-.46 7.48-3.77 7.94-7.94H23v-2h-2.06zM12 19c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z"></path></svg></button>
        </div>
        
        <div class="bottom-panel" id="bottomPanel">
            <div class="panel-handle"></div>
            <div class="panel-content">
                <div class="logo" style="display: flex; align-items: center; padding-bottom: 15px;"><img src="logo.png" alt="Logo V-MapVideo" style="width: 32px; height: 32px; border-radius: 50%; margin-right: 10px; background: white; padding: 3px;"><h2 style="margin: 0; font-size: 20px;">V-MapVideo</h2></div>
                
                <div class="section-title">Kh√°m ph√° c√°c ƒë·ªãa ƒëi·ªÉm</div>
                <div id="locationsList"></div>

                <div class="section-title">ƒêi·ªÅu khi·ªÉn l·ªô tr√¨nh</div>
                <div class="controls-grid">
                    <button id="clearRouteBtn">‚ùå X√≥a tuy·∫øn</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.1/mapbox-gl-directions.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let map, directions, userMarker, routeCoords = [];
            const iconUrl = 'https://cdn-icons-png.flaticon.com/512/2776/2776000.png';
            let originalLabelColors = {}; // Bi·∫øn l∆∞u m√†u g·ªëc

            const places = [
                // Data
                { name: "Dinh ƒê·ªôc L·∫≠p", category: "L·ªãch s·ª≠ & VƒÉn h√≥a", coords: [106.6955, 10.7769], youtube: "your_youtube_embed_link" },
                { name: "Nh√† th·ªù ƒê·ª©c B√†", category: "L·ªãch s·ª≠ & VƒÉn h√≥a", coords: [106.6985, 10.7797], youtube: "your_youtube_embed_link" },
                { name: "B∆∞u ƒëi·ªán Trung t√¢m S√†i G√≤n", category: "L·ªãch s·ª≠ & VƒÉn h√≥a", coords: [106.7000, 10.7799], youtube: "your_youtube_embed_link" },
                { name: "B·∫øn Nh√† R·ªìng", category: "L·ªãch s·ª≠ & VƒÉn h√≥a", coords: [106.7066, 10.7683], youtube: "your_youtube_embed_link" },
                { name: "Nh√† h√°t L·ªõn TP.HCM", category: "L·ªãch s·ª≠ & VƒÉn h√≥a", coords: [106.7032, 10.7768], youtube: "your_youtube_embed_link" },
                { name: "B·∫£o t√†ng TP.HCM", category: "L·ªãch s·ª≠ & VƒÉn h√≥a", coords: [106.7005, 10.7738], youtube: "your_youtube_embed_link" },
                { name: "Th·∫£o C·∫ßm Vi√™n S√†i G√≤n", category: "L·ªãch s·ª≠ & VƒÉn h√≥a", coords: [106.7047, 10.7881], youtube: "your_youtube_embed_link" },
                { name: "Ch·ª£ B·∫øn Th√†nh", category: "L·ªãch s·ª≠ & VƒÉn h√≥a", coords: [106.6981, 10.7725], youtube: "your_youtube_embed_link" },
                { name: "Ph·ªë ƒëi b·ªô Nguy·ªÖn Hu·ªá", category: "Vui ch∆°i Gi·∫£i tr√≠ & Tham quan", coords: [106.7044, 10.7731], youtube: "your_youtube_embed_link" },
                { name: "Ph·ªë T√¢y B√πi Vi·ªán", category: "Vui ch∆°i Gi·∫£i tr√≠ & Tham quan", coords: [106.6923, 10.7667], youtube: "your_youtube_embed_link" },
                { name: "T√≤a nh√† Bitexco", category: "Vui ch∆°i Gi·∫£i tr√≠ & Tham quan", coords: [106.7042, 10.7718], youtube: "your_youtube_embed_link" },
                { name: "C√¥ng vi√™n Tao ƒê√†n", category: "Vui ch∆°i Gi·∫£i tr√≠ & Tham quan", coords: [106.6921, 10.7753], youtube: "your_youtube_embed_link" },
                { name: "C√¥ng vi√™n B·∫øn B·∫°ch ƒê·∫±ng", category: "Vui ch∆°i Gi·∫£i tr√≠ & Tham quan", coords: [106.7069, 10.7753], youtube: "your_youtube_embed_link" },
                { name: "H·ªì Con R√πa", category: "Vui ch∆°i Gi·∫£i tr√≠ & Tham quan", coords: [106.6948, 10.7821], youtube: "your_youtube_embed_link" },
                { name: "C√¥ng vi√™n L√™ VƒÉn T√°m", category: "Vui ch∆°i Gi·∫£i tr√≠ & Tham quan", coords: [106.6917, 10.7883], youtube: "your_youtube_embed_link" },
                { name: "C√¥ng vi√™n Vinhomes Central Park", category: "Vui ch∆°i Gi·∫£i tr√≠ & Tham quan", coords: [106.7236, 10.7891], youtube: "your_youtube_embed_link" },
                { name: "Landmark 81", category: "Vui ch∆°i Gi·∫£i tr√≠ & Tham quan", coords: [106.7217, 10.7942], youtube: "your_youtube_embed_link" },
                { name: "Khu du l·ªãch VƒÉn h√≥a Su·ªëi Ti√™n", category: "Vui ch∆°i Gi·∫£i tr√≠ & Tham quan", coords: [106.8021, 10.8643], youtube: "your_youtube_embed_link" },
                { name: "C√¥ng vi√™n n∆∞·ªõc ƒê·∫ßm Sen", category: "Vui ch∆°i Gi·∫£i tr√≠ & Tham quan", coords: [106.6385, 10.7674], youtube: "your_youtube_embed_link" },
                { name: "Khu du l·ªãch VƒÉn Th√°nh", category: "Vui ch∆°i Gi·∫£i tr√≠ & Tham quan", coords: [106.7131, 10.7963], youtube: "your_youtube_embed_link" },
                { name: "Ch·ª£ H·ªì Th·ªã K·ª∑", category: "Vui ch∆°i Gi·∫£i tr√≠ & Tham quan", coords: [106.6713, 10.7634], youtube: "your_youtube_embed_link" },
                { name: "B·ªánh vi·ªán Nhi ƒê·ªìng 2", category: "Y t·∫ø", coords: [106.6993, 10.7842], youtube: "your_youtube_embed_link" },
                { name: "B·ªánh vi·ªán Ch·ª£ R·∫´y", category: "Y t·∫ø", coords: [106.6609, 10.7582], youtube: "your_youtube_embed_link" },
                { name: "B·ªánh vi·ªán Nhi ƒê·ªìng 1", category: "Y t·∫ø", coords: [106.6711, 10.7656], youtube: "your_youtube_embed_link" },
                { name: "B·ªánh vi·ªán Da Li·ªÖu TP.HCM", category: "Y t·∫ø", coords: [106.6811, 10.7711], youtube: "your_youtube_embed_link" },
                { name: "B·ªánh vi·ªán T·ª´ D≈©", category: "Y t·∫ø", coords: [106.6853, 10.7712], youtube: "your_youtube_embed_link" },
                { name: "B·ªánh vi·ªán Qu√¢n y 175", category: "Y t·∫ø", coords: [106.6883, 10.8143], youtube: "your_youtube_embed_link" },
                { name: "B·ªánh vi·ªán ƒêa khoa Qu·ªëc t·∫ø Vinmec", category: "Y t·∫ø", coords: [106.7219, 10.7885], youtube: "your_youtube_embed_link" },
                { name: "ƒê·∫°i h·ªçc B√°ch Khoa", category: "Gi√°o d·ª•c", coords: [106.6593, 10.7722], youtube: "your_youtube_embed_link" },
                { name: "ƒê·∫°i h·ªçc Khoa h·ªçc X√£ h·ªôi v√† Nh√¢n vƒÉn", category: "Gi√°o d·ª•c", coords: [106.7011, 10.7818], youtube: "your_youtube_embed_link" },
                { name: "ƒê·∫°i h·ªçc Ki·∫øn tr√∫c", category: "Gi√°o d·ª•c", coords: [106.6953, 10.7797], youtube: "your_youtube_embed_link" },
                { name: "ƒê·∫°i h·ªçc Lu·∫≠t TP.HCM", category: "Gi√°o d·ª•c", coords: [106.7118, 10.7661], youtube: "your_youtube_embed_link" },
                { name: "ƒê·∫°i h·ªçc Khoa h·ªçc T·ª± nhi√™n", category: "Gi√°o d·ª•c", coords: [106.6821, 10.7628], youtube: "your_youtube_embed_link" },
                { name: "ƒê·∫°i h·ªçc Ngo·∫°i Th∆∞∆°ng C∆° s·ªü II", category: "Gi√°o d·ª•c", coords: [106.6750, 10.8005], youtube: "your_youtube_embed_link" },
                { name: "ƒê·∫°i h·ªçc S√†i G√≤n", category: "Gi√°o d·ª•c", coords: [106.6823, 10.7610], youtube: "your_youtube_embed_link" },
                { name: "B·∫øn xe Mi·ªÅn ƒê√¥ng (m·ªõi)", category: "Giao th√¥ng", coords: [106.8123, 10.8711], youtube: "your_youtube_embed_link" },
                { name: "B·∫øn xe Mi·ªÅn T√¢y", category: "Giao th√¥ng", coords: [106.6119, 10.7323], youtube: "your_youtube_embed_link" }
            ];
            
            function initMap() {
                mapboxgl.accessToken = 'pk.eyJ1IjoidGFsYWR1IiwiYSI6ImNtZzBqMzJtMTBjb2syaXNnaTY1enU1czAifQ.bmFrDEPpfWOH4kZ5YNRueg';
                map = new mapboxgl.Map({ container: 'map', style: 'mapbox://styles/mapbox/streets-v11', center: [106.700981, 10.776530], zoom: 13 });
                directions = new MapboxDirections({ accessToken: mapboxgl.accessToken, unit: 'metric', profile: 'mapbox/driving', controls: { instructions: true, profileSwitcher: false } });
                document.getElementById('directions-container').appendChild(directions.onAdd(map));
            }

            function setupRouteControls() {
                function clearRoute() {
                    directions.removeRoutes();
                    routeCoords = [];
                }
                document.getElementById("clearRouteBtn").onclick = clearRoute;
            }

            function setupDirectionsToggle() {
                const directionsContainer = document.getElementById('directions-container');
                const showDirectionsBtn = document.getElementById('showDirectionsBtn');

                showDirectionsBtn.addEventListener('click', () => {
                    directionsContainer.classList.toggle('is-visible');
                });

                directions.on('clear', () => {
                    directionsContainer.classList.remove('is-visible');
                });
            }

            // --- H√ÄM M·ªöI ƒê·ªÇ THAY ƒê·ªîI M√ÄU T√äN ƒê∆Ø·ªúNG ---
            function setupRouteLabelStyling() {
                const getRoadLabelLayers = () => {
                    const layers = map.getStyle().layers;
                    return layers.filter(layer => 
                        layer.type === 'symbol' && 
                        layer['source-layer'] &&
                        layer['source-layer'].includes('road')
                    );
                };

                const applyWhiteLabels = () => {
                    const roadLabelLayers = getRoadLabelLayers();
                    // Ch·ªâ l∆∞u m√†u g·ªëc l·∫ßn ƒë·∫ßu ti√™n
                    if (Object.keys(originalLabelColors).length === 0) {
                        roadLabelLayers.forEach(layer => {
                            originalLabelColors[layer.id] = {
                                'text-color': map.getPaintProperty(layer.id, 'text-color'),
                                'text-halo-color': map.getPaintProperty(layer.id, 'text-halo-color') || 'rgba(0,0,0,0)',
                                'text-halo-width': map.getPaintProperty(layer.id, 'text-halo-width') || 0
                            };
                        });
                    }

                    roadLabelLayers.forEach(layer => {
                        map.setPaintProperty(layer.id, 'text-color', '#ffffff');
                        map.setPaintProperty(layer.id, 'text-halo-color', 'rgba(0, 0, 0, 0.85)');
                        map.setPaintProperty(layer.id, 'text-halo-width', 1.5);
                    });
                };

                const resetLabels = () => {
                    if (Object.keys(originalLabelColors).length === 0) return;

                    const roadLabelLayers = getRoadLabelLayers();
                    roadLabelLayers.forEach(layer => {
                        const originalStyle = originalLabelColors[layer.id];
                        if (originalStyle) {
                            map.setPaintProperty(layer.id, 'text-color', originalStyle['text-color']);
                            map.setPaintProperty(layer.id, 'text-halo-color', originalStyle['text-halo-color']);
                            map.setPaintProperty(layer.id, 'text-halo-width', originalStyle['text-halo-width']);
                        }
                    });
                };

                directions.on('route', applyWhiteLabels);
                directions.on('clear', resetLabels);
            }
            
            function setupUserLocation() {
                function locateUser() { if (navigator.geolocation) { navigator.geolocation.getCurrentPosition(pos => { const lng = pos.coords.longitude; const lat = pos.coords.latitude; if (!userMarker) { userMarker = new mapboxgl.Marker({ color: "red" }).setLngLat([lng, lat]).setPopup(new mapboxgl.Popup().setText("üìç V·ªã tr√≠ c·ªßa b·∫°n")).addTo(map); } else { userMarker.setLngLat([lng, lat]); } map.flyTo({ center: [lng, lat], zoom: 15 }); }, err => { alert("Kh√¥ng l·∫•y ƒë∆∞·ª£c v·ªã tr√≠: " + err.message); }); } else { alert("Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã GPS."); } }
                document.getElementById("locateUserBtn").onclick = locateUser;
            }

            function setupPlacesAndFilters() {
                const geojson = { 'type': 'FeatureCollection', 'features': places.map(p => ({ 'type': 'Feature', 'properties': { 'name': p.name, 'youtube': p.youtube, 'category': p.category }, 'geometry': { 'type': 'Point', 'coordinates': p.coords } })) };
                map.on('load', () => {
                    document.getElementById('loader').style.opacity = '0';
                    setTimeout(() => { document.getElementById('loader').style.display = 'none'; }, 500);
                    
                    map.loadImage(iconUrl, (error, image) => {
                        if (error) throw error;
                        map.addImage('place-icon', image);
                        map.addSource('places-source', { type: 'geojson', data: geojson, cluster: true, clusterMaxZoom: 14, clusterRadius: 50 });
                        map.addLayer({ id: 'clusters', type: 'circle', source: 'places-source', filter: ['has', 'point_count'], paint: { 'circle-color': ['step', ['get', 'point_count'], '#51bbd6', 100, '#f1f075', 750, '#f28cb1'], 'circle-radius': ['step', ['get', 'point_count'], 20, 100, 30, 750, 40] } });
                        map.addLayer({ id: 'cluster-count', type: 'symbol', source: 'places-source', filter: ['has', 'point_count'], layout: { 'text-field': '{point_count_abbreviated}', 'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'], 'text-size': 12 } });
                        map.addLayer({ id: 'unclustered-point', type: 'symbol', source: 'places-source', filter: ['!', ['has', 'point_count']], layout: { 'icon-image': 'place-icon', 'icon-size': 0.06 } });
                    });
                    map.on('click', 'clusters', (e) => { const features = map.queryRenderedFeatures(e.point, { layers: ['clusters'] }); const clusterId = features[0].properties.cluster_id; map.getSource('places-source').getClusterExpansionZoom(clusterId, (err, zoom) => { if (err) return; map.easeTo({ center: features[0].geometry.coordinates, zoom: zoom }); }); });
                    
                    map.on('click', 'unclustered-point', (e) => { const coordinates = e.features[0].geometry.coordinates.slice(); const { name, youtube } = e.features[0].properties; new mapboxgl.Popup().setLngLat(coordinates).setHTML(`<h3>${name}</h3><iframe loading="eager" width="250" height="150" src="${youtube}" frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe>`).addTo(map); });
                    
                    map.on('mouseenter', ['clusters', 'unclustered-point'], () => { map.getCanvas().style.cursor = 'pointer'; });
                    map.on('mouseleave', ['clusters', 'unclustered-point'], () => { map.getCanvas().style.cursor = ''; });

                    const routeLayerIds = ['directions-route-line-alt', 'directions-route-line-casing'];
                    map.on('click', routeLayerIds, (e) => {
                        e.preventDefault();
                        const videoUrl = "https://www.youtube.com/@dunguyen-r3v?sub_confirmation=1";
                        const popupContent = `
                            <div style="padding: 10px; text-align: center;">
                                <h4 style="margin: 0 0 10px 0;">Video H∆∞·ªõng D·∫´n</h4>
                                <a href="${videoUrl}" target="_blank" style="padding: 8px 12px; background-color: #ff0000; color: white; text-decoration: none; border-radius: 6px; font-weight: bold;">
                                    üé¨ Xem ngay
                                </a>
                            </div>
                        `;
                        new mapboxgl.Popup().setLngLat(e.lngLat).setHTML(popupContent).addTo(map);
                    });
                    map.on('mouseenter', routeLayerIds, () => { map.getCanvas().style.cursor = 'pointer'; });
                    map.on('mouseleave', routeLayerIds, () => { map.getCanvas().style.cursor = ''; });
                });
                directions.on("route", e => { if (e.route && e.route.length > 0) { routeCoords = e.route[0].geometry.coordinates; try { const layers = map.getStyle().layers; const labelLayerId = layers.find(layer => layer.type === 'symbol' && layer.layout['text-field']).id; const routeLayers = layers.filter(layer => layer.id.startsWith('directions-')); routeLayers.forEach(layer => { map.moveLayer(layer.id, labelLayerId); }); } catch (err) { console.error("Kh√¥ng th·ªÉ di chuy·ªÉn l·ªõp ch·ªâ ƒë∆∞·ªùng:", err); } } });
            }

            function createLocationList() {
                const locationsListDiv = document.getElementById('locationsList');
                locationsListDiv.innerHTML = ''; 
                const groupedPlaces = places.reduce((groups, place) => { const category = place.category || 'Kh√°c'; if (!groups[category]) groups[category] = []; groups[category].push(place); return groups; }, {});
                for (const category in groupedPlaces) {
                    const categoryGroup = document.createElement('div');
                    const categoryTitle = document.createElement('h3');
                    categoryTitle.className = 'category-title';
                    categoryTitle.innerHTML = `${category} <span>‚ñ∂</span>`;
                    const itemsContainer = document.createElement('div');
                    itemsContainer.className = 'location-items-container';
                    groupedPlaces[category].forEach(place => {
                        const listItem = document.createElement('div');
                        listItem.className = 'location-item';
                        listItem.innerHTML = `<img src="${iconUrl}" alt="icon"><h4>${place.name}</h4>`;
                        
                        listItem.addEventListener('click', () => { map.flyTo({ center: place.coords, zoom: 16 }); new mapboxgl.Popup().setLngLat(place.coords).setHTML(`<h3>${place.name}</h3><iframe loading="eager" width="250" height="150" src="${place.youtube}" frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe>`).addTo(map); });
                        
                        itemsContainer.appendChild(listItem);
                    });
                    categoryGroup.appendChild(categoryTitle);
                    categoryGroup.appendChild(itemsContainer);
                    locationsListDiv.appendChild(categoryGroup);
                }
                document.querySelectorAll('.category-title').forEach(title => {
                    title.addEventListener('click', () => {
                        const itemsContainer = title.nextElementSibling;
                        const arrow = title.querySelector('span');
                        if (itemsContainer && itemsContainer.classList.contains('location-items-container')) {
                            const isVisible = itemsContainer.style.display === 'block';
                            itemsContainer.style.display = isVisible ? 'none' : 'block';
                            arrow.textContent = isVisible ? '‚ñ∂' : '‚ñº';
                        }
                    });
                });
            }

            function initPanelDrag() {
                const panel = document.getElementById('bottomPanel');
                const handle = panel.querySelector('.panel-handle');
                const locateBtnWrapper = document.getElementById('locateUserBtnWrapper');
                const showDirectionsBtnWrapper = document.getElementById('showDirectionsBtnWrapper');
                const youtubeLinks = document.querySelector('.youtube-links-overlay');
                const mapContainer = document.getElementById('mapContainer');
                let dragging = false, startY;
                let panelHeight, snapPosPeek, snapPosFull = 0, snapPosHalf;

                function setInitialPosition() {
                    panelHeight = panel.clientHeight;
                    snapPosPeek = panelHeight - window.innerHeight * 0.30;
                    panel.style.transform = `translateY(${snapPosPeek}px)`;
                    locateBtnWrapper.style.bottom = `calc(30vh - 10px)`;
                    showDirectionsBtnWrapper.style.bottom = `calc(30vh + 50px)`;
                    youtubeLinks.style.bottom = `calc(30vh + 20px)`;
                }
                
                setTimeout(setInitialPosition, 100);

                const onDown = (e) => {
                    e.preventDefault();
                    dragging = true;
                    startY = e.pageY || e.touches[0].pageY;
                    panel.style.transition = 'none';
                };
                
                const onMove = (e) => {
                    if (!dragging) return;
                    e.preventDefault();
                    
                    const currentY = e.pageY || e.touches[0].pageY;
                    const delta = currentY - startY;
                    const currentTransform = (panel.style.transform.match(/-?[\d\.]+/g) || [0])[0] * 1;
                    let newY = currentTransform + delta;

                    const topLimit = 0;
                    if (newY < topLimit) newY = topLimit;

                    panel.style.transform = `translateY(${newY}px)`;
                    
                    const panelVisibleHeight = window.innerHeight - panel.getBoundingClientRect().top;
                    locateBtnWrapper.style.bottom = `${panelVisibleHeight}px`;
                    showDirectionsBtnWrapper.style.bottom = `${panelVisibleHeight + 60}px`;
                    youtubeLinks.style.bottom = `${panelVisibleHeight + 20}px`;
                    
                    startY = currentY;
                };

                const onUp = () => {
                    if (!dragging) return;
                    dragging = false;
                    panel.style.transition = 'transform 0.4s cubic-bezier(0.25, 0.8, 0.25, 1)';
                    
                    panelHeight = panel.clientHeight;
                    snapPosPeek = panelHeight - window.innerHeight * 0.30;
                    snapPosHalf = panelHeight - window.innerHeight * 0.5;
                    const positions = [snapPosFull, snapPosHalf, snapPosPeek];
                    
                    const currentY = (panel.style.transform.match(/-?[\d\.]+/g) || [snapPosPeek])[0] * 1;

                    const closest = positions.reduce((prev, curr) => (Math.abs(curr - currentY) < Math.abs(prev - currentY) ? curr : prev));
                    panel.style.transform = `translateY(${closest}px)`;
                    
                    if (closest === snapPosFull) {
                        mapContainer.classList.add('is-dimmed');
                    } else {
                        mapContainer.classList.remove('is-dimmed');
                    }
                    
                    let panelVisibleHeightVh = (closest === snapPosFull) ? 75 : (closest === snapPosHalf) ? 50 : 30;
                    locateBtnWrapper.style.bottom = `calc(${panelVisibleHeightVh}vh - 10px)`;
                    showDirectionsBtnWrapper.style.bottom = `calc(${panelVisibleHeightVh}vh + 50px)`;
                    youtubeLinks.style.bottom = `calc(${panelVisibleHeightVh}vh + 20px)`;
                };
                
                handle.addEventListener('mousedown', onDown);
                document.addEventListener('mousemove', onMove);
                document.addEventListener('mouseup', onUp);
                window.addEventListener('mouseleave', onUp);

                handle.addEventListener('touchstart', onDown, { passive: false });
                document.addEventListener('touchmove', onMove, { passive: false });
                document.addEventListener('touchend', onUp);
                document.addEventListener('touchcancel', onUp);
            }

            initMap();
            setupRouteControls(); 
            setupDirectionsToggle();
            setupRouteLabelStyling(); // <-- TH√äM H√ÄM M·ªöI V√ÄO CHU·ªñI KH·ªûI T·∫†O
            setupUserLocation();
            setupPlacesAndFilters();
            createLocationList();
            initPanelDrag();
        });
    </script>
</body>
</html>